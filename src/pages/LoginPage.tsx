import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, Link } from 'react-router-dom';
import { loginUser, selectAuthLoading, selectAuthError, selectIsAuthenticated } from '../store/authSlice';
import type { AppDispatch } from '../store';
import Button from '../components/Button/Button';
import { useTheme } from '../hooks/useTheme'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ useTheme
import './LoginPage.css';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();

  const isLoading = useSelector(selectAuthLoading);
  const error = useSelector(selectAuthError);
  const isAuthenticated = useSelector(selectIsAuthenticated);
  const [theme, toggleTheme] = useTheme(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useTheme

  // –≠—Ç–æ—Ç useEffect –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  // –∏ —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /login (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ history back)
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/');
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { 
    event.preventDefault();
    dispatch(loginUser({ email, password }))
      .unwrap()
      .then(() => {
        // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, isAuthenticated –æ–±–Ω–æ–≤–∏—Ç—Å—è, –∏ useEffect –≤—ã—à–µ —Å–¥–µ–ª–∞–µ—Ç navigate.
        // navigate('/'); // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –æ—Ç isAuthenticated
      })
      .catch((errorPayload: string) => { 
        // errorPayload –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É–ª rejectWithValue
        console.error('Login attempt failed. Error message from slice:', errorPayload);
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ useSelector(selectAuthError)
      });
  };

  return (
    <div className="login-page-container">
      <button onClick={toggleTheme} className="theme-toggle-button page-theme-toggle-button">
        {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
      </button>
      <div className="login-form-container">
        <h1>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)} // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω 'e'
              required
              disabled={isLoading}
            />
          </div>
          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)} // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω 'e'
              required
              disabled={isLoading}
            />
          </div>
          <Button type="submit" variant="primary" className="btn-login" disabled={isLoading}>
            {isLoading ? <span className="loading-text">–í—Ö–æ–¥...</span> : '–í–æ–π—Ç–∏'}
          </Button>
          {error && <p className="error-message">{error}</p>}
        </form>
        <div className="register-link-container">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <Link to="/register" className="register-link">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</Link>
        </div>
      </div>
    </div>
  );
}

export default LoginPage;

import React, { useState, useEffect } from 'react'; // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç React
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, Link } from 'react-router-dom';
import { registerUser, selectAuthLoading, selectAuthError, selectIsAuthenticated } from '../store/authSlice';
import type { AppDispatch } from '../store';
import Button from '../components/Button/Button';
import { useTheme } from '../hooks/useTheme'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ useTheme
import './RegistrationPage.css';

function RegistrationPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();

  const isLoading = useSelector(selectAuthLoading);
  const error = useSelector(selectAuthError);
  const isAuthenticated = useSelector(selectIsAuthenticated);
  const [theme, toggleTheme] = useTheme(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useTheme

  // –≠—Ç–æ—Ç useEffect –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  // –∏–ª–∏ –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/');
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => { 
    event.preventDefault();
    if (password !== confirmPassword) {
      // –í–º–µ—Å—Ç–æ alert, –ª—É—á—à–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      // dispatch(setAuthError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")); // –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª —Ç–∞–∫–æ–π action
      alert("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"); // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º alert –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      return;
    }
    dispatch(registerUser({ email, password }))
      .unwrap()
      .then(() => {
        // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥, isAuthenticated –æ–±–Ω–æ–≤–∏—Ç—Å—è, –∏ useEffect –≤—ã—à–µ —Å–¥–µ–ª–∞–µ—Ç navigate.
        // navigate('/');
      })
      .catch((errorPayload: string) => { 
        console.error('Registration attempt failed. Error message from slice:', errorPayload);
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ useSelector(selectAuthError)
      });
  };

  return (
    <div className="registration-page-container">
      <button onClick={toggleTheme} className="theme-toggle-button page-theme-toggle-button">
        {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
      </button>
      <div className="registration-form-container">
        <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)} // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω 'e'
              required
              disabled={isLoading}
            />
          </div>
          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)} // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω 'e'
              required
              disabled={isLoading}
            />
          </div>
          <div className="form-group">
            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setConfirmPassword(e.target.value)} // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω 'e'
              required
              disabled={isLoading}
            />
          </div>
          <Button type="submit" variant="primary" className="btn-register" disabled={isLoading}>
            {isLoading ? <span className="loading-text">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span> : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </Button>
          {error && <p className="error-message">{error}</p>}
        </form>
        <div className="login-link-container">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link to="/login" className="login-link">–í–æ–π–¥–∏—Ç–µ</Link>
        </div>
      </div>
    </div>
  );
}

export default RegistrationPage;
